diff --git a/content/browser/accessibility/browser_accessibility_cocoa.h b/content/browser/accessibility/browser_accessibility_cocoa.h
index 9923734..a0202a4 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.h
+++ b/content/browser/accessibility/browser_accessibility_cocoa.h
@@ -87,7 +87,9 @@
 @property(nonatomic, readonly) NSNumber* enabled;
 // Returns a text marker that points to the last character in the document that
 // can be selected with Voiceover.
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id endTextMarker;
+#endif
 @property(nonatomic, readonly) NSNumber* expanded;
 @property(nonatomic, readonly) NSNumber* focused;
 @property(nonatomic, readonly) NSNumber* grabbed;
@@ -123,12 +125,16 @@
 @property(nonatomic, readonly) NSArray* selectedChildren;
 @property(nonatomic, readonly) NSString* selectedText;
 @property(nonatomic, readonly) NSValue* selectedTextRange;
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id selectedTextMarkerRange;
+#endif
 @property(nonatomic, readonly) NSValue* size;
 @property(nonatomic, readonly) NSString* sortDirection;
 // Returns a text marker that points to the first character in the document that
 // can be selected with Voiceover.
+#ifndef MAS_BUILD
 @property(nonatomic, readonly) id startTextMarker;
+#endif
 // A string indicating the subrole of this object as far as accessibility
 // is concerned.
 @property(nonatomic, readonly) NSString* subrole;
diff --git a/content/browser/accessibility/browser_accessibility_cocoa.mm b/content/browser/accessibility/browser_accessibility_cocoa.mm
index 1ae72bd..920425c 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.mm
+++ b/content/browser/accessibility/browser_accessibility_cocoa.mm
@@ -98,6 +98,7 @@
 // VoiceOver uses -1 to mean "no limit" for AXResultsLimit.
 const int kAXResultsLimitNoLimit = -1;
 
+#ifndef MAS_BUILD
 extern "C" {
 
 // See http://openradar.appspot.com/9896491. This SPI has been tested on 10.5,
@@ -211,6 +212,7 @@ bool GetTextMarkerRange(AXTextMarkerRangeRef marker_range,
   return base::SysUTF16ToNSString(BrowserAccessibilityManager::GetTextForRange(
       *start_object, start_offset, *end_object, end_offset));
 }
+#endif
 
 // Returns an autoreleased copy of the AXNodeData's attribute.
 NSString* NSStringForStringAttribute(
@@ -438,7 +440,9 @@ + (void)initialize {
       {NSAccessibilityDisclosedRowsAttribute, @"disclosedRows"},
       {NSAccessibilityDropEffectsAttribute, @"dropEffects"},
       {NSAccessibilityEnabledAttribute, @"enabled"},
+#ifndef MAS_BUILD
       {NSAccessibilityEndTextMarkerAttribute, @"endTextMarker"},
+#endif
       {NSAccessibilityExpandedAttribute, @"expanded"},
       {NSAccessibilityFocusedAttribute, @"focused"},
       {NSAccessibilityGrabbedAttribute, @"grabbed"},
@@ -466,13 +470,17 @@ + (void)initialize {
       {NSAccessibilityRowsAttribute, @"rows"},
       // TODO(aboxhall): expose
       // NSAccessibilityServesAsTitleForUIElementsAttribute
+#ifndef MAS_BUILD
       {NSAccessibilityStartTextMarkerAttribute, @"startTextMarker"},
+#endif
       {NSAccessibilitySelectedAttribute, @"selected"},
       {NSAccessibilitySelectedChildrenAttribute, @"selectedChildren"},
       {NSAccessibilitySelectedTextAttribute, @"selectedText"},
       {NSAccessibilitySelectedTextRangeAttribute, @"selectedTextRange"},
+#ifndef MAS_BUILD
       {NSAccessibilitySelectedTextMarkerRangeAttribute,
        @"selectedTextMarkerRange"},
+#endif
       {NSAccessibilitySizeAttribute, @"size"},
       {NSAccessibilitySortDirectionAttribute, @"sortDirection"},
       {NSAccessibilitySubroleAttribute, @"subrole"},
@@ -511,8 +519,10 @@ - (instancetype)initWithObject:(BrowserAccessibility*)accessibility {
 }
 
 - (void)detach {
+#ifndef MAS_BUILD
   if (browserAccessibility_)
     NSAccessibilityUnregisterUniqueIdForUIElement(self);
+#endif
   browserAccessibility_ = nullptr;
 }
 
@@ -803,6 +813,7 @@ - (NSNumber*)enabled {
       GetState(browserAccessibility_, ui::AX_STATE_ENABLED)];
 }
 
+#ifndef MAS_BUILD
 // Returns a text marker that points to the last character in the document that
 // can be selected with VoiceOver.
 - (id)endTextMarker {
@@ -830,6 +841,7 @@ - (id)endTextMarker {
   return CreateTextMarker(*last_text_object,
                           last_text_object->GetText().length());
 }
+#endif
 
 - (NSNumber*)expanded {
   if (![self instanceActive])
@@ -1481,6 +1493,7 @@ - (NSValue*)selectedTextRange {
   return [NSValue valueWithRange:NSMakeRange(selStart, selLength)];
 }
 
+#ifndef MAS_BUILD
 - (id)selectedTextMarkerRange {
   if (![self instanceActive])
     return nil;
@@ -1507,6 +1520,7 @@ - (id)selectedTextMarkerRange {
   return CreateTextMarkerRange(*anchorObject, anchorOffset, *focusObject,
                                focusOffset);
 }
+#endif
 
 - (NSValue*)size {
   if (![self instanceActive])
@@ -1539,6 +1553,7 @@ - (NSString*)sortDirection {
   return nil;
 }
 
+#ifndef MAS_BUILD
 // Returns a text marker that points to the first character in the document that
 // can be selected with VoiceOver.
 - (id)startTextMarker {
@@ -1565,6 +1580,7 @@ - (id)startTextMarker {
 
   return CreateTextMarker(*first_text_object, 0);
 }
+#endif
 
 // Returns a subrole based upon the role.
 - (NSString*) subrole {
@@ -1945,6 +1961,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
     return nil;
   }
 
+#ifndef MAS_BUILD
   if ([attribute isEqualToString:@"AXUIElementForTextMarker"]) {
     BrowserAccessibility* object;
     int offset;
@@ -2034,6 +2051,7 @@ - (id)accessibilityAttributeValue:(NSString*)attribute
     NSString* text = GetTextForTextMarkerRange(parameter);
     return [NSNumber numberWithInt:[text length]];
   }
+#endif
 
   if ([attribute isEqualToString:
       NSAccessibilityBoundsForRangeParameterizedAttribute]) {
diff --git a/content/browser/accessibility/browser_accessibility_manager_mac.mm b/content/browser/accessibility/browser_accessibility_manager_mac.mm
index c389a5c..1b34553 100644
--- a/content/browser/accessibility/browser_accessibility_manager_mac.mm
+++ b/content/browser/accessibility/browser_accessibility_manager_mac.mm
@@ -83,8 +83,10 @@
     @"AXTextSelectionGranularity";
 NSString* const NSAccessibilityTextSelectionChangedFocus =
     @"AXTextSelectionChangedFocus";
+#ifndef MAS_BUILD
 NSString* const NSAccessibilitySelectedTextMarkerRangeAttribute =
     @"AXSelectedTextMarkerRange";
+#endif
 NSString* const NSAccessibilityTextChangeElement = @"AXTextChangeElement";
 NSString* const NSAccessibilityTextEditType = @"AXTextEditType";
 NSString* const NSAccessibilityTextChangeValue = @"AXTextChangeValue";
@@ -425,8 +427,10 @@
     focus_object = focus_object->GetClosestPlatformObject();
     auto native_focus_object = ToBrowserAccessibilityCocoa(focus_object);
     if (native_focus_object && [native_focus_object instanceActive]) {
+#ifndef MAS_BUILD
       [user_info setObject:[native_focus_object selectedTextMarkerRange]
                     forKey:NSAccessibilitySelectedTextMarkerRangeAttribute];
+#endif
       [user_info setObject:native_focus_object
                     forKey:NSAccessibilityTextChangeElement];
     }
diff --git a/content/common/sandbox_mac.mm b/content/common/sandbox_mac.mm
index ab87ff4..d58ec66d4 100644
--- a/content/common/sandbox_mac.mm
+++ b/content/common/sandbox_mac.mm
@@ -41,10 +41,12 @@
 #include "ui/base/layout.h"
 #include "ui/gl/init/gl_factory.h"
 
+#ifndef MAS_BUILD
 extern "C" {
 void CGSSetDenyWindowServerConnections(bool);
 void CGSShutdownServerConnections();
 };
+#endif
 
 namespace content {
 namespace {
@@ -135,6 +137,7 @@ NOINLINE void FatalStringQuoteException(const std::string& str) {
 }
 
 bool SandboxCompiler::CompileAndApplyProfile(std::string* error) {
+#ifndef MAS_BUILD
   char* error_internal = nullptr;
   std::vector<const char*> params;
 
@@ -151,6 +154,7 @@ NOINLINE void FatalStringQuoteException(const std::string& str) {
     sandbox::Seatbelt::FreeError(error_internal);
     return false;
   }
+#endif
   return true;
 }
 
@@ -343,6 +347,7 @@ NOINLINE void FatalStringQuoteException(const std::string& str) {
 
   if (sandbox_type == SANDBOX_TYPE_RENDERER &&
       base::mac::IsOSMountainLionOrLater()) {
+#ifndef MAS_BUILD
     // Now disconnect from WindowServer, after all objects have been warmed up.
     // Shutting down the connection requires connecting to WindowServer,
     // so do this before actually engaging the sandbox. This is only done on
@@ -351,6 +356,7 @@ NOINLINE void FatalStringQuoteException(const std::string& str) {
     // be printed to the system logger on certain OS versions.
     CGSSetDenyWindowServerConnections(true);
     CGSShutdownServerConnections();
+#endif
   }
 }
 
diff --git a/net/dns/dns_config_service_posix.cc b/net/dns/dns_config_service_posix.cc
index ba8a369..7c48676 100644
--- a/net/dns/dns_config_service_posix.cc
+++ b/net/dns/dns_config_service_posix.cc
@@ -208,6 +208,7 @@ class DnsConfigServicePosix::Watcher {
 
   bool Watch() {
     bool success = true;
+#ifndef MAS_BUILD
     if (!config_watcher_.Watch(base::Bind(&Watcher::OnConfigChanged,
                                           base::Unretained(this)))) {
       LOG(ERROR) << "DNS config watch failed to start.";
@@ -229,6 +230,7 @@ class DnsConfigServicePosix::Watcher {
                                 DNS_CONFIG_WATCH_MAX);
     }
 #endif  // !defined(OS_ANDROID) && !defined(OS_IOS)
+#endif
     return success;
   }
 
